plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id 'kotlin-kapt'
    alias(libs.plugins.hilt)
    alias(libs.plugins.androidx.compose.compiler)
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}

def githubToken = localProperties.getProperty('GITHUB_TOKEN')

android {
    namespace 'com.example.githubusers'
    compileSdk 36
    buildFeatures.buildConfig = true

    defaultConfig {
        applicationId "com.example.githubusers"
        minSdk 28
        targetSdk 36
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        buildConfigField "String", "GITHUB_TOKEN", "\"${githubToken}\""
    }


    signingConfigs {
        release {
            storeFile file(localProperties.getProperty('KEYSTORE_FILE', 'keystore.jks'))
            storePassword localProperties.getProperty('KEYSTORE_PASSWORD', 'password')
            keyAlias localProperties.getProperty('KEY_ALIAS', 'alias')
            keyPassword localProperties.getProperty('KEY_PASSWORD', 'password')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain (17)
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += ['META-INF/LICENSE.md']
            excludes += ['META-INF/LICENSE-notice.md']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

kapt {
    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.retrofit
    implementation libs.gsonConverter
    implementation libs.coroutinesCore
    implementation libs.coroutinesAndroid
    implementation libs.androidx.runtime.livedata
    implementation libs.coil
    implementation libs.pagingRuntime
    implementation libs.pagingCompose
    implementation libs.navCompose
    implementation libs.hiltAndroid
    implementation libs.androidx.appcompat
    kapt libs.hiltCompiler
    implementation libs.hiltNavigationCompose
    implementation libs.accompanistSwiperefresh
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    androidTestImplementation(libs.mockk)
    androidTestImplementation(libs.hilt.android.testing)
    kaptAndroidTest(libs.hiltCompiler)
    androidTestImplementation(libs.mockkAndroid)
    androidTestImplementation(libs.mockKAgent)
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
    testImplementation(libs.kluent)
    testImplementation(libs.mockk)
    testImplementation(libs.pagingCommon)
    testImplementation(libs.coroutinesTest)
    testImplementation(libs.mockServer)
}